#!/usr/bin/env python3
from telegram import InlineQueryResultArticle, InputTextMessageContent, ParseMode
from telegram.ext import Updater, InlineQueryHandler, MessageHandler, Filters
from uuid import uuid4
import logging
import os
import sys
from typing import Tuple, Optional
import itertools


def get_lines(book: int, start: int, end: int = None) -> str:
    def number_lines(iterable, start, end):
        for number, line in zip(
            range(start, end + 1), itertools.islice(book_file, start - 1, end + 1)
        ):
            if number % 5 == 0:
                yield f"{line.strip()} *{number}*\n"
            else:
                yield line

    print(book, start, end)
    book_path = os.path.join(f"odysseia/{book:02}.txt")
    end = end if end is not None else start 
    try:
        with open(book_path, "r") as book_file:
            lines = "".join(number_lines(book_file, start, end))
            return lines
    except IOError:
        return "οὐκ ἔξεστι"


def extract_book_lines(query: str) -> Tuple[int, int, Optional[int]]:
    begin: int
    end: Optional[int]

    book_string, lines_string = query.split(",")

    book = int(book_string.strip())

    begin_end_strings = lines_string.split("-")
    if len(begin_end_strings) == 2:
        begin = int(begin_end_strings[0].strip())
        end = int(begin_end_strings[1].strip())
    elif len(begin_end_strings) == 1:
        begin = int(begin_end_strings[0].strip())
        end = None
    else:
        raise ValueError()
    return book, begin, end


def on_inline_query(bot, update):
    query = update.inline_query.query
    logging.info("Query: {}".format(query))

    lines = get_lines(*extract_book_lines(query))

    results = [
        InlineQueryResultArticle(
            id=uuid4(),
            title=lines,
            input_message_content=InputTextMessageContent(lines),
        )
    ]

    update.inline_query.answer(results)


def on_message(bot, update):
    message = update.message
    logging.info("Text: {}".format(message))
    lines = get_lines(*extract_book_lines(message.text))
    bot.send_message(message.chat_id, lines, parse_mode=ParseMode.MARKDOWN)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    if "TELEGRAM_ODYSSEY_TOKEN" not in os.environ:
        print(
            "Please specify bot token in variable TELEGRAM_ODYSSEY_TOKEN.",
            file=sys.stderr,
        )
        sys.exit(1)

    bot = Updater(token=os.environ["TELEGRAM_ODYSSEY_TOKEN"].strip())
    bot.dispatcher.add_handler(InlineQueryHandler(on_inline_query))
    bot.dispatcher.add_handler(MessageHandler(Filters.text, on_message))

    bot.start_polling()
    bot.idle()
